package main

import (
	"fmt"
	"log"
	"math/big"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/jmjac/ethGoTest/helperClient"
	perennial "github.com/jmjac/ethGoTest/perennial/abis"
)

func checkLiquidable(users, products []common.Address, blockNum *big.Int, ethClient *helperClient.Client) ([]*big.Int, error) {
	inject := common.HexToAddress("0x5B5BCC826664f0eb76d3fcF6a33647E335141279")
	caller := common.HexToAddress("0x07b237558c1B1ce38CAF4443C29d149f2b04d815")

	liqCheck, _ := abi.JSON(strings.NewReader(perennial.PerennialCheckABI))

	data, err := liqCheck.Pack("check", users, products)
	if err != nil {
		log.Fatal(err)
	}
	var resp []byte
	if blockNum == nil {
		resp, err = ethClient.EthCallInjectBytecode(caller, inject, data, bytecode, inject, "")
	} else {
		resp, err = ethClient.EthCallInjectBytecode(caller, inject, data, bytecode, inject, fmt.Sprintf("0x%x", blockNum))
	}
	if err != nil {
		return nil, err
	}

	var out []interface{}
	results := &out
	if results == nil {
		results = new([]interface{})
	}

	if len(*results) == 0 {
		res, err0 := liqCheck.Unpack("check", resp)
		err = err0
		*results = res
	} else {
		res := *results
		err = liqCheck.UnpackIntoInterface(res[0], "check", resp)
	}

	if err != nil {
		return *new([]*big.Int), err
	}
	if err != nil {
		return nil, err
	}

	dateFromCall := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	return dateFromCall, nil
}

var bytecode = "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cb15de5d14610030575b600080fd5b6101576004803603604081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184602083028401116401000000008311171561009557600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092959493602081019350359150506401000000008111156100e557600080fd5b8201836020820111156100f757600080fd5b8035906020019184602083028401116401000000008311171561011957600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506101a7945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561019357818101518382015260200161017b565b505050509050019250505060405180910390f35b606080835167ffffffffffffffff811180156101c257600080fd5b506040519080825280602002602001820160405280156101ec578160200160208202803683370190505b50905060005b84518110156104765760006060732d264ebdb6632a06a1726193d4d37fef1e5dbdcd6001600160a01b031687848151811061022957fe5b602002602001015187858151811061023d57fe5b602090810291909101810151604080516001600160a01b03948516602482015293909116604480850191909152815180850390910181526064909301815290820180516001600160e01b03166386b9d81f60e01b17815290518251909182918083835b602083106102bf5780518252601f1990920191602091820191016102a0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610321576040519150601f19603f3d011682016040523d82523d6000602084013e610326565b606091505b5091509150811561046c57604080516370a0823160e01b8152306004820152905160009173605d26fbd5be761089281d5cec2ce86eea667109916370a0823191602480820192602092909190829003018186803b15801561038657600080fd5b505afa15801561039a573d6000803e3d6000fd5b505050506040513d60208110156103b057600080fd5b5051855190915081908690869081106103c557fe5b6020908102919091018101919091526040805163a9059cbb60e01b8152739dc07f920ef2c70ef94fa45374a561cac01f2617600482015260248101849052905173605d26fbd5be761089281d5cec2ce86eea6671099263a9059cbb92604480820193918290030181600087803b15801561043e57600080fd5b505af1158015610452573d6000803e3d6000fd5b505050506040513d602081101561046857600080fd5b5050505b50506001016101f2565b50939250505056fea2646970667358221220b24938d268a7a19966c208d26f2eb46dd3d358c14832f56f991edc1090503b8464736f6c634300060c0033"
